<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>{{ title or "modsuav" }}</title>
    <link href="/style.css" rel="stylesheet" />
  </head>

  <body class="min-h-screen flex flex-col bg-backdrop text-whisper font-sans antialiased">



    <!-- ‚ú∂ LOADER -->
    <div id="loader" class="fixed inset-0 z-50 bg-backdrop text-whisper flex flex-col items-center justify-center text-sm font-mono transition-opacity duration-1000 space-y-1 tracking-tight">
      <div class="text-suav animate-pulse">
        ‚ú∂ <span id="dot-sequence">.</span>
      </div>
      <div id="loader-message" class="opacity-70">initializing modsuav console</div>
    </div>



    <!-- ‚ú∂ AUDIO -->
    <audio id="boot-sound" preload="auto">
      <source src="/intro.mp3" type="audio/mpeg" />
    </audio>



  <!-- ‚ú∂ NAV -->
{% include "nav.njk" %}

<!-- ‚ú∂ MOBILE OVERLAY NAV (hidden on desktop) -->
<div id="navOverlay"
  class="hidden fixed inset-0 bg-[#0a0a0a] text-whisper z-50 px-6 py-8 space-y-6 text-lg overflow-y-auto md:hidden"
>
  <a href="/" class="block">In√≠cio</a>

  <button id="freedomToggle" class="flex items-center gap-1 w-full text-left">
    Freedom34
    <svg id="freedomChevron" class="w-4 h-4 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
    </svg>
  </button>

  <div id="freedomPanel" class="hidden pl-4 border-l border-neutral-700 space-y-2 pt-2">
    <a href="/freebies" class="block text-base text-suav">‚ú∂ Freebies</a>
    <a href="/branches" class="block text-base">Branches</a>
    <a href="/docs" class="block text-base">Docs</a>
  </div>

  <a href="/creative" class="block">Creative</a>
  <a href="/philosophy" class="block">Philosophy</a>
  <a href="/contact" class="block">Contact</a>
</div>






    <!-- ‚ú∂ CLICK MESSAGE -->
    <p id="click-message" class="text-xs text-center text-suav/60 mt-4 opacity-0 transition-opacity duration-500">
      ‚ú∂ connection verified
    </p>

    <!-- ‚ú∂ MAIN SLOT -->
    <main class="flex-1">
      {{ content | safe }}
    </main>

    <!-- ‚ú∂ FOOTER -->
    {% include "footer.njk" %}

    <!-- ‚ú∂ CONSOLE SCRIPT -->
    <script>
      const messages = [
        "initializing modsuav console",
        "linking to grove tree",
        "calibrating soul-interface",
        "establishing frequency sync",
        "syncing encrypted memory",
        "‚ú∂ ready"
      ];

      const bootSound = document.getElementById("boot-sound");

      bootSound?.play().catch((err) => {
        console.log("Autoplay blocked, will wait for user interaction:", err);
      });

      let hasUserClicked = false;

      window.addEventListener("click", () => {
        if (hasUserClicked) return;
        hasUserClicked = true;

        bootSound?.play().catch(err => {
          console.warn("Manual playback failed:", err);
        });

        const clickMessage = document.getElementById("click-message");
        if (clickMessage) {
          clickMessage.classList.remove("opacity-0");
          clickMessage.classList.add("opacity-100");

          setTimeout(() => {
            clickMessage.classList.remove("opacity-100");
            clickMessage.classList.add("opacity-0");
          }, 3500);
        }
      }, { once: true });

      if (!sessionStorage.getItem("modsuavLoaded")) {
        sessionStorage.setItem("modsuavLoaded", "true");

        let messageIndex = 0;
        const loaderMessage = document.getElementById("loader-message");
        const dotSequence = document.getElementById("dot-sequence");

        const dots = [".", "..", "..."];
        let dotState = 0;
        const dotTimer = setInterval(() => {
          dotState = (dotState + 1) % dots.length;
          dotSequence.textContent = dots[dotState];
        }, 300);

        const messageDelay = 500;
        const messageTimer = setInterval(() => {
          messageIndex++;
          if (messageIndex >= messages.length) {
            clearInterval(messageTimer);
            clearInterval(dotTimer);
            return;
          }
          loaderMessage.textContent = messages[messageIndex];
        }, messageDelay);

        setTimeout(() => {
          const loader = document.getElementById("loader");
          if (loader) {
            loader.classList.add("opacity-0");
            setTimeout(() => loader.remove(), 600);
          }
        }, messageDelay * (messages.length + 1));
      } else {
        document.getElementById("loader")?.remove();
      }
    </script>


<script>
  document.addEventListener("DOMContentLoaded", () => {
    const menuToggle = document.getElementById("menuToggle");
    const navOverlay = document.getElementById("navOverlay");
    const freedomToggle = document.getElementById("freedomToggle");
    const freedomPanel = document.getElementById("freedomPanel");
    const freedomChevron = document.getElementById("freedomChevron");

    // üçî Toggle overlay menu
    menuToggle?.addEventListener("click", () => {
      const isOpen = navOverlay.classList.toggle("hidden");
      document.body.style.overflow = isOpen ? "" : "hidden";
    });

    // ‚ú∂ Toggle Freedom34 panel
    freedomToggle?.addEventListener("click", () => {
      const open = freedomPanel.classList.toggle("hidden");
      freedomChevron?.classList.toggle("rotate-180", open);
    });

    // ‚éã ESC closes everything
    document.addEventListener("keydown", (e) => {
      if (e.key === "Escape") {
        navOverlay?.classList.add("hidden");
        freedomPanel?.classList.add("hidden");
        freedomChevron?.classList.remove("rotate-180");
        document.body.style.overflow = "";
      }
    });

    // üßπ Close overlay on link click
    document.querySelectorAll("#navOverlay a").forEach(link => {
      link.addEventListener("click", () => {
        navOverlay?.classList.add("hidden");
        freedomPanel?.classList.add("hidden");
        freedomChevron?.classList.remove("rotate-180");
        document.body.style.overflow = "";
      });
    });
  });
</script>







  </body>
</html>




