<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>{{ title or "modsuav" }}</title>
    <link href="/style.css" rel="stylesheet" />
  </head>

  <body class="min-h-screen flex flex-col bg-backdrop text-whisper font-sans antialiased">

    <!-- ✶ LOADER -->
    <div id="loader" class="fixed inset-0 z-50 bg-backdrop text-whisper flex flex-col items-center justify-center text-sm font-mono transition-opacity duration-1000 space-y-1 tracking-tight">
      <div class="text-suav animate-pulse">
        ✶ <span id="dot-sequence">.</span>
      </div>
      <div id="loader-message" class="opacity-70">initializing modsuav console</div>
    </div>

    <!-- ✶ AUDIO -->
    <audio id="boot-sound" preload="auto">
      <source src="/intro.mp3" type="audio/mpeg" />
    </audio>

  <!-- ✶ NAV -->
{% include "nav.njk" %}

<!-- ✶ FREEDOM34 FLYOUT PANEL -->
<div
  id="freedomPanel"
  class="hidden fixed top-14 left-0 w-full h-[50vh] bg-[#0a0a0a] border-t border-neutral-800 text-whisper font-mono text-sm z-40 transition-all duration-300 ease-in-out"
>
  <div class="max-w-6xl mx-auto px-8 py-8 flex flex-col md:flex-row justify-between gap-8">
    <div class="space-y-3 max-w-xl">
      <h2 class="text-xl font-bold text-suav">SUAV Console Labs</h2>
      <p class="opacity-80 leading-snug">
        Soul-coded tools for artists and studios. No roadmap. Just resonance.
      </p>
      <p class="text-xs text-neutral-500">Everything here hums quietly until called.</p>
    </div>

    <div class="space-y-2">
      <a href="/freebies" class="block hover:text-suav transition">Freebies ✶</a>
      <a href="/branches" class="block hover:text-suav transition">Branches</a>
      <a href="/docs" class="block hover:text-suav transition">Docs</a>
    </div>
  </div>
</div>

    <!-- ✶ CLICK MESSAGE -->
    <p id="click-message" class="text-xs text-center text-suav/60 mt-4 opacity-0 transition-opacity duration-500">
      ✶ connection verified
    </p>

    <!-- ✶ MAIN SLOT -->
    <main class="flex-1">
      {{ content | safe }}
    </main>

    <!-- ✶ FOOTER -->
    {% include "footer.njk" %}

    <!-- ✶ CONSOLE SCRIPT -->
    <script>
      const messages = [
        "initializing modsuav console",
        "linking to grove tree",
        "calibrating soul-interface",
        "establishing frequency sync",
        "syncing encrypted memory",
        "✶ ready"
      ];

      const bootSound = document.getElementById("boot-sound");

      bootSound?.play().catch((err) => {
        console.log("Autoplay blocked, will wait for user interaction:", err);
      });

      let hasUserClicked = false;

      window.addEventListener("click", () => {
        if (hasUserClicked) return;
        hasUserClicked = true;

        bootSound?.play().catch(err => {
          console.warn("Manual playback failed:", err);
        });

        const clickMessage = document.getElementById("click-message");
        if (clickMessage) {
          clickMessage.classList.remove("opacity-0");
          clickMessage.classList.add("opacity-100");

          setTimeout(() => {
            clickMessage.classList.remove("opacity-100");
            clickMessage.classList.add("opacity-0");
          }, 3500);
        }
      }, { once: true });

      if (!sessionStorage.getItem("modsuavLoaded")) {
        sessionStorage.setItem("modsuavLoaded", "true");

        let messageIndex = 0;
        const loaderMessage = document.getElementById("loader-message");
        const dotSequence = document.getElementById("dot-sequence");

        const dots = [".", "..", "..."];
        let dotState = 0;
        const dotTimer = setInterval(() => {
          dotState = (dotState + 1) % dots.length;
          dotSequence.textContent = dots[dotState];
        }, 300);

        const messageDelay = 500;
        const messageTimer = setInterval(() => {
          messageIndex++;
          if (messageIndex >= messages.length) {
            clearInterval(messageTimer);
            clearInterval(dotTimer);
            return;
          }
          loaderMessage.textContent = messages[messageIndex];
        }, messageDelay);

        setTimeout(() => {
          const loader = document.getElementById("loader");
          if (loader) {
            loader.classList.add("opacity-0");
            setTimeout(() => loader.remove(), 600);
          }
        }, messageDelay * (messages.length + 1));
      } else {
        document.getElementById("loader")?.remove();
      }
    </script>


<script>
  document.addEventListener("DOMContentLoaded", () => {
    console.log("✅ DOM fully loaded");

    const menuToggle = document.getElementById("menuToggle");
    const navLinks = document.getElementById("navLinks");
    const toggleBtn = document.getElementById("freedomToggle");
    const chevronIcon = document.getElementById("freedomChevron");
    const panel = document.getElementById("freedomPanel");

    if (!menuToggle) console.warn("⚠️ menuToggle not found");
    if (!navLinks) console.warn("⚠️ navLinks not found");
    if (!toggleBtn) console.warn("⚠️ freedomToggle not found");
    if (!panel) console.warn("⚠️ freedomPanel not found");

    // 🍔 Mobile Menu
    menuToggle?.addEventListener("click", () => {
      console.log("🍔 Hamburger clicked");
      navLinks?.classList.toggle("hidden");

      const isOpen = !navLinks?.classList.contains("hidden");
      document.body.style.overflow = isOpen ? "hidden" : "";
    });

    // ✶ Freedom34 Flyout
    toggleBtn?.addEventListener("click", (e) => {
      e.stopPropagation();
      console.log("✶ Freedom34 clicked");
      panel?.classList.toggle("hidden");
      chevronIcon?.classList.toggle("rotate-180");

      const isOpen = !panel?.classList.contains("hidden");
      document.body.style.overflow = isOpen ? "hidden" : "";
    });

    // 🧹 Auto-collapse mobile nav when link clicked
    document.querySelectorAll("#navLinks a").forEach(link => {
      link.addEventListener("click", () => {
        if (window.innerWidth < 768 && !navLinks?.classList.contains("hidden")) {
          navLinks.classList.add("hidden");
          document.body.style.overflow = "";
          console.log("🧹 Mobile nav closed on link click");
        }
      });
    });

    // ESC to close both
    document.addEventListener("keydown", (e) => {
      if (e.key === "Escape") {
        navLinks?.classList.add("hidden");
        panel?.classList.add("hidden");
        chevronIcon?.classList.remove("rotate-180");
        document.body.style.overflow = "";
      }
    });
  });
</script>






  </body>
</html>




